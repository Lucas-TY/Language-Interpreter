package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, LPAREN, RPAREN,TIMES,RETURN,SEMICOLON,LCURLY,RCURLY,INT,PRINT,ASSIGN,ELARGER,ESMALLER,EQUAL,NOTEQAUL,LARGER,SMALLER,IF,ELSE,AND,OR,NOT,COMMA,Q,REF,PERIOD,MUTABLE,NIL,WHILE;
terminal UMINUS;
terminal Long    INTCONST;
terminal String IDENT;

non terminal Program         program;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal Stmtlist        stmtList;
non terminal Stmt            stmt;
non terminal Cond            cond;
non terminal LogicCond       logicCond;
non terminal FuncDefList     funcDefList;
non terminal FuncDef         funcDef;
non terminal VarDecl         varDecl;
non terminal Type            type;
non terminal FormalDeclList  formalDeclList;
non terminal NeFormalDeclList neFormalDeclList;
non terminal ExprList        exprList;
non terminal NeExprList      neExprList;
non terminal RefExpr      refExpr;



precedence left PERIOD;
precedence left PLUS, MINUS;
precedence left TIMES;

precedence left ELSE;


precedence left AND, OR;

precedence left ELARGER, ESMALLER, EQUAL, NOTEQAUL, LARGER, SMALLER;
precedence left UMINUS;
precedence left LCURLY,RCURLY,LPAREN, RPAREN;
precedence left NOT;
precedence left IDENT;



start with program;

program ::= funcDefList:funcL 
            {: RESULT = new Program(funcL, loc(funcLleft, funcLright)); :}
         ;
funcDefList ::= funcDef:funcD funcDefList:funcL 
            {: RESULT = new FuncDefList(funcD,funcL,loc(funcDleft,funcDright)); :}
         | /* empty string */
            {: RESULT = null; :}
         ;
funcDef ::= varDecl:varD LPAREN formalDeclList:forList RPAREN  LCURLY stmtList:sl RCURLY
            {: RESULT = new FuncDef(varD,forList,sl,loc(varDleft,varDright)); :}
         ;

varDecl ::= type:ty IDENT:x
             {: RESULT = new VarDecl(ty,x,loc(xleft,xright)); :}
         | MUTABLE type:ty IDENT:x
             {: RESULT = new VarDecl(ty,x,loc(xleft,xright)); :}
         ;

type ::= INT:tInt
            {: RESULT = new Type(Type.INT,loc(tIntleft,tIntright)); :}
         | Q: tQ
            {: RESULT = new Type(Type.Q,loc(tQleft,tQright)); :}
         | REF: tRef
            {: RESULT = new Type(Type.REF,loc(tRefleft,tRefright)); :}
         ;

formalDeclList ::= neFormalDeclList:neList
             {: RESULT = new FormalDeclList(neList,loc(neListleft,neListright)); :}
         | /* empty string */
            {: RESULT = null; :}
         ;

neFormalDeclList ::=   varDecl:varD COMMA neFormalDeclList:neList
              {: RESULT = new NeFormalDeclList(varD,neList,loc(varDleft,varDright)) ; :}
         |           varDecl:varD 
              {: RESULT = new NeFormalDeclList(varD,null,loc(varDleft,varDright)) ; :}
         ;

stmtList ::= stmt:first  stmtList:rest
            {: RESULT = new Stmtlist(first,rest,loc(firstleft,firstright)); :}
         | /* empty string */
          {: RESULT = null; :}
         ;
         

stmt ::= varDecl:varD ASSIGN expr:e SEMICOLON
            {: RESULT = new DeclStmt(varD,e,loc(varDleft,varDright)); :}
         |  IDENT:var LPAREN exprList:epList RPAREN SEMICOLON
            {: RESULT = new CallStmt(var,epList,loc(varleft,varright)); :}
         |  IDENT:var ASSIGN expr:e SEMICOLON
            {: RESULT = new UpdateStmt(var,e,loc(varleft,varright)); :}
         |  PRINT expr:e SEMICOLON
            {: RESULT = new OutputStmt(e,OutputStmt.PRINT,loc(eleft,eright)); :}
         |  RETURN expr:e SEMICOLON
            {: RESULT = new OutputStmt(e,OutputStmt.RETURN,loc(eleft,eright)); :}
         |  LCURLY stmtList:sl RCURLY
            {: RESULT = sl; :}
         |  IF  cond:c1   stmt:s1  
            {: RESULT = new IfStmt(c1,s1,null,loc(s1left,s1right)); :}
         |  IF  cond:c1   stmt:s1  ELSE  stmt:s2  
            {: RESULT = new IfStmt(c1,s1,s2,loc(s1left,s1right)); :}
             %prec ELSE
         |  WHILE  cond:c1   stmt:s1  
            {: RESULT = new WhileStmt(c1,s1,loc(s1left,s1right)); :} 
      ;

cond ::= expr:e1 ELARGER expr:e2
               {: RESULT = new ConditionExpr(e1, ConditionExpr.ELARGER, e2, loc(e1left, e1right)); :}
            |  expr:e1 ESMALLER expr:e2
               {: RESULT = new ConditionExpr(e1, ConditionExpr.ESMALLER, e2, loc(e1left, e1right)); :}
            |  expr:e1 EQUAL expr:e2
               {: RESULT = new ConditionExpr(e1, ConditionExpr.EQUAL, e2, loc(e1left, e1right)); :}
            |  expr:e1 NOTEQAUL expr:e2
               {: RESULT = new ConditionExpr(e1, ConditionExpr.NOTEQAUL, e2, loc(e1left, e1right)); :}
            |  expr:e1 LARGER expr:e2
               {: RESULT = new ConditionExpr(e1, ConditionExpr.LARGER, e2, loc(e1left, e1right)); :}
            |  expr:e1 SMALLER expr:e2
               {: RESULT = new ConditionExpr(e1, ConditionExpr.SMALLER, e2, loc(e1left, e1right)); :}
            |   LPAREN cond:c RPAREN
               {: RESULT = c; :}
            |  NOT  cond:c 
               {: RESULT =  new NotCond(c,loc(cleft, cright)); :}
            | logicCond:o
               {: RESULT = o; :}
            ;
logicCond ::=   cond:c1 AND  cond:c2 
                     {: RESULT =  new LogicCond(c1,LogicCond.AND,c2,loc(c1left, c1right)); :}
                  |  cond:c1 OR  cond:c2 
                     {: RESULT =  new LogicCond(c1,LogicCond.OR,c2,loc(c1left, c1right)); :}
                  ;



expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  NIL:c
         {: RESULT = new NilExpr(loc(cleft, cright)); :}
      |  IDENT:s
         {: RESULT = new  IdentExpr(s, loc(sleft, sright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  refExpr:e
         {: RESULT = e; :}
      |  MINUS expr:e
         {: RESULT = new UminusExpr(  e, loc(eleft, eright));  :}
         %prec UMINUS
      |  LPAREN type RPAREN expr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      |  IDENT:var LPAREN exprList:epList RPAREN 
            {: RESULT = new FuncExpr(var,epList,loc(varleft,varright)); :}
         %prec IDENT
      ;

exprList  ::= neExprList:rest
         {: RESULT = new ExprList(rest, loc(restleft, restright)); :}
      | /* empty string */
          {: RESULT = null; :}
      ; 

neExprList ::= expr:e1 COMMA neExprList:neList
         {: RESULT = new NeExprList(e1,neList, loc(e1left, e1right)); :}
      | expr:e1
          {: RESULT = new NeExprList(e1,null, loc(e1left, e1right)); :}
      ; 

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            ;
refExpr ::= expr:e1 PERIOD expr:e2
               {: RESULT = new RefExpr(e1, e2, loc(e1left, e1right)); :}
            ;
